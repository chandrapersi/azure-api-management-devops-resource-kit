<policies>
  <inbound>
    <base />
    <rewrite-uri template="/calculator.asmx" copy-unmatched-params="false" />
    <set-header name="SOAPAction" exists-action="override">
      <value>"http://tempuri.org/Multiply"</value>
    </set-header>
    <set-body template="liquid">
      <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="http://tempuri.org/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <soap:Body>
          <Multiply>
                {% if body.multiply.intA %}
                <intA>{{body.multiply.intA}}</intA>
                {% else %}
                <intA xsi:nil="true" />
                {% endif %}
                {% if body.multiply.intB %}
                <intB>{{body.multiply.intB}}</intB>
                {% else %}
                <intB xsi:nil="true" />
                {% endif %}
            </Multiply>
        </soap:Body>
      </soap:Envelope>
    </set-body>
    <set-header name="Content-Type" exists-action="override">
      <value>text/xml</value>
    </set-header>
  </inbound>
  <backend>
    <base />
  </backend>
  <outbound>
    <base />
    <choose>
      <when condition="@(context.Response.StatusCode &lt; 400)">
        <set-body template="liquid">
        {
            "multiplyResponse": 
            {
                "multiplyResult": {% if body.envelope.body.MultiplyResponse.MultiplyResult %}{{body.envelope.body.MultiplyResponse.MultiplyResult}}{% else %} null {% endif %}
            }
        }</set-body>
      </when>
      <otherwise>
        <set-variable name="old-body" value="@(context.Response.Body.As&lt;string&gt;(preserveContent: true))" />
        <!-- Error response as per https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#7102-error-condition-responses -->
        <set-body template="liquid">{
            "error": {
                "code": "{{body.envelope.body.fault.faultcode}}",
                "message": "{{body.envelope.body.fault.faultstring}}"
            }
        }</set-body>
        <choose>
          <when condition="@(string.IsNullOrEmpty(context.Response.Body.As&lt;JObject&gt;(preserveContent: true)[&quot;error&quot;][&quot;code&quot;].ToString()) &amp;&amp; string.IsNullOrEmpty(context.Response.Body.As&lt;JObject&gt;(preserveContent: true)[&quot;error&quot;][&quot;message&quot;].ToString()))">
            <set-body>@{
                    var newResponseBody = new JObject();
                    newResponseBody["error"] = new JObject();
                    newResponseBody["error"]["code"] = "InvalidErrorResponseBody";
                    if (string.IsNullOrEmpty((string)context.Variables["old-body"]))
                    {
                        newResponseBody["error"]["message"] = "The error response body was not a valid SOAP error response. The response body was empty.";
                    }
                    else
                    {
                        newResponseBody["error"]["message"] = "The error response body was not a valid SOAP error response. The response body was: '" + context.Variables["old-body"] + "'.";
                    }
                    return newResponseBody.ToString();
                }</set-body>
          </when>
        </choose>
      </otherwise>
    </choose>
    <set-header name="Content-Type" exists-action="override">
      <value>application/json</value>
    </set-header>
  </outbound>
</policies>